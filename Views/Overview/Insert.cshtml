@model PipelineFeatureList.Models.ValveSectionFeature

@{
    ViewBag.Title = "Create Valve Section Feature";
}

<h2>Create Valve Section Feature</h2>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

<fieldset>
    @Html.HiddenFor(model => model.ODRecordMatrixCheck, new { id = "hdnODRecordMatrixCheck" })
    @Html.HiddenFor(model => model.WTRecordMatrixCheck, new { id = "hdnWTRecordMatrixCheck" })
    @Html.HiddenFor(model => model.SeamRecordMatrixCheck, new { id = "hdnSeamRecordMatrixCheck" })
    @Html.HiddenFor(model => model.SpecRatingRecordMatrixCheck, new { id = "hdnSpecRatingRecordMatrixCheck" })
    <legend>ValveSectionFeature</legend>

    <table>
        <tr>
            <td>
                Location
            </td>
            <td>
                @Html.Raw(ViewBag.CurrentLocation)
            </td>
        </tr>
        <tr>
            <td>
                Station Name
            </td>
            <td>
                @Html.Raw(ViewBag.currentPipeline.StationName)
            </td>
        </tr>
        <tr>
            <td>
                Town
            </td>
            <td>
                @Html.Raw(ViewBag.currentPipeline.Town)
            </td>
        </tr>
        <tr>
            <td>Street</td>
            
            <td>
                @Html.Raw(ViewBag.currentPipeline.Street)
            </td>
        </tr>
        <tr>
            <td>
                Cross Street
            </td>
            <td>
                @Html.Raw(ViewBag.currentPipeline.CrossStreet)
            </td>
        </tr>


        <tr>
            <td>
                Current Station
            </td>
            <td>
                @Html.Raw(ViewBag.currentPipeline.PipelineItem)
            </td>
        </tr>
        <tr>
            <td>
                Current Flow Circuit
            </td>
            <td>
                @Html.Raw(ViewBag.CurrentCircuitItem)
            </td>
        </tr>
        <tr>
            <td>
                From Circuit / To Circuit
            </td>
            <td>
                @Html.Raw(ViewBag.CurrentCircuitItem) / @Html.Raw(ViewBag.CurrentCircuitItem)
            </td>

        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.FeatureMarkNumber)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.EditorFor(model => model.FeatureMarkNumber)
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-field">
                    From Series / To Series
                </div>
            </td>
            <td>
                @Html.EditorFor(model => model.FromSeries) / @Html.EditorFor(model => model.ToSeries)
            </td>
        </tr>
        <tr>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-label">@Html.LabelFor(model => model.FeatureID)</div>
                        </td>
                        <td>/</td>
                        <td><div class="editor-label">@Html.LabelFor(model => model.TypeID)</div></td>
                        <td></td>
                    </tr>
                </table>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("FeatureID", ViewBag.FeatureID as SelectList, "- Select a Feature -", new { id = "ddlFeatures", onchange = "pipetypesfromfeatures();" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field" id="divPipeTypes">
                                @Html.DropDownList("TypeID", ViewBag.TypeID as SelectList, "- Select a Feature Type -", new { id = "ddlPipeTypes", onchange = "updateNAdropdowns()" })
                            </div>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.JobWOPO)
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.JobWOPO)
                            </div>
                        </td>
                        <td>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.JobWOPOUnknown) Unknown
                            </div>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.InstallDate)
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @*@Html.EditorFor(model => model.InstallDate)*@
                                @Html.TextBox("InstallDate", "01/01/1900")
                            </div>
                        </td>
                        @*<td>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.InstallDateUnknown) Unknown
                            </div>
                        </td>*@
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ConstructionTypeID)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.DropDownList("ConstructionTypeID", "- Select a Construction Type -")
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Feature Notes/Comments")
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.TextAreaFor(model => model.Notes, 6, 200, null)
                </div>
            </td>
        </tr>


        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("OD 1 / Rec ID 1 / Rec ID 2")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("ODID1", ViewBag.ODID1 as SelectList, "- Select an OD -", new { id = "ddlODID1" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("ODRecordID1", ViewBag.ODRecordID1 as SelectList, "- Select a Record Identifier -", new { id = "ddlODRecordID1", onchange = "onchange_doctype(ddlODRecordID1, ODRecordID1DocType); onchangeeventOD();" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("ODRecordID2", ViewBag.ODRecordID2 as SelectList, "- Select a Record Identifier -", new { id = "ddlODRecordID2", onchange = "onchange_doctype(ddlODRecordID2, ODRecordID2DocType); onchangeeventOD();" })
                            </div>
                        </td>
                        <td>
                            <label id="ODRecordMatrixCheck" class="message-error"></label>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("OD1 RecID 1 DocType / OD1 RecID 2  DocType")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.ODRecordID1DocType, new { id = "ODRecordID1DocType", @readonly = "readonly" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.ODRecordID2DocType, new { id = "ODRecordID2DocType", @readonly = "readonly" })
                            </div>
                        </td>

                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.Length)
            </td>
            <td>
                @Html.EditorFor(model => model.Length)
            </td>
        </tr>
        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("WT 1 / Rec ID 1 / Rec ID 2")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.EditorFor(model => model.WallThickness1)
                                @Html.ValidationMessageFor(model => model.WallThickness1)
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("WTRecordID1", ViewBag.WTRecordID1 as SelectList, "- Select a Record Identifier -", new { id = "ddlWTRecordID1", onchange = "onchange_doctype(ddlWTRecordID1, WTRecordID1DocType); onchangeeventWT();" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("WTRecordID2", ViewBag.WTRecordID2 as SelectList, "- Select a Record Identifier -", new { id = "ddlWTRecordID2", onchange = "onchange_doctype(ddlWTRecordID2, WTRecordID2DocType); onchangeeventWT();" })
                            </div>
                        </td>
                        <td>
                            <label id="WTRecordMatrixCheck" class="message-error"></label>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("WT1 RecID 1 DocType / WT1 RecID 2  DocType")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.WTRecordID1DocType, new { id = "WTRecordID1DocType", @readonly = "readonly" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.WTRecordID2DocType, new { id = "WTRecordID2DocType", @readonly = "readonly" })
                            </div>
                        </td>

                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.ODID2)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.DropDownList("ODID2", ViewBag.ODID2 as SelectList, "- Select an OD -", new { id = "ddlODID2" })
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.WallThickness2)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.EditorFor(model => model.WallThickness2)
                    @Html.ValidationMessageFor(model => model.WallThickness2)
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Seam Weld Type / Rec ID 1 / Rec ID 2")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("SeamWeldTypeID", ViewBag.SeamWeldTypeID as SelectList, "- Select a Seam Weld Type -", new { id = "ddlSeamWeldTypeID" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("SeamRecordID1", ViewBag.SeamRecordID1 as SelectList, "- Select a Record Identifier -", new { id = "ddlSeamRecordID1", onchange = "onchange_doctype(ddlSeamRecordID1, SeamRecordID1DocType); onchangeeventST();" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("SeamRecordID2", ViewBag.SeamRecordID2 as SelectList, "- Select a Record Identifier -", new { id = "ddlSeamRecordID2", onchange = "onchange_doctype(ddlSeamRecordID2, SeamRecordID2DocType); onchangeeventST();" })
                            </div>
                        </td>
                        <td>
                            <label id="SeamRecordMatrixCheck" class="message-error"></label>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>



        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Seam Weld RecID 1 DocType / Seam Weld RecID 2  DocType")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.SeamRecordID1DocType, new { id = "SeamRecordID1DocType", @readonly = "readonly" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.SeamRecordID2DocType, new { id = "SeamRecordID2DocType", @readonly = "readonly" })
                            </div>
                        </td>

                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td><div class="editor-label">@Html.LabelFor(model => model.SpecRatingID)</div></td>
            <td>
                <div class="editor-field">
                    @Html.DropDownList("SpecRatingID", ViewBag.SpecRatingID as SelectList, "- Select a Spec Rating -", new { id = "ddlSpecRatingID" })
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Grade / Rec ID 1 / Rec ID 2")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("GradeID", ViewBag.GradeID as SelectList, "- Select a Grade -", new { id = "ddlGradeID" })
                            </div>
                        </td>
                        <td>/</td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("GradeRecordID1", ViewBag.GradeRecordID1 as SelectList, "- Select a Record Identifier -", new { id = "ddlGradeRecordID1", onchange = "onchange_doctype(ddlGradeRecordID1, GradeRecordID1DocType); onchangeeventGR();" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("GradeRecordID2", ViewBag.GradeRecordID2 as SelectList, "- Select a Record Identifier -", new { id = "ddlGradeRecordID2", onchange = "onchange_doctype(ddlGradeRecordID2, GradeRecordID2DocType); onchangeeventGR();" })
                            </div>
                        </td>
                        <td>
                            <label id="SpecRatingRecordMatrixCheck" class="message-error"></label>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Grade RecID 1 DocType / Grade RecID 2  DocType")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.GradeRecordID1DocType, new { id = "GradeRecordID1DocType", @readonly = "readonly" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.GradeRecordID2DocType, new { id = "GradeRecordID2DocType", @readonly = "readonly" })
                            </div>
                        </td>

                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Rating Class / Rec ID 1 / Rec ID 2")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("ANSIRatingID", ViewBag.ANSIRatingID as SelectList, "- Select a Rating Class -", new { id = "ddlANSIRatingID" })
                            </div>
                        </td>
                        <td>/</td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("SpecRatingRecordID1", ViewBag.SpecRatingRecordID1 as SelectList, "- Select a Record Identifier -", new { id = "ddlSpecRatingRecordID1", onchange = "onchange_doctype(ddlSpecRatingRecordID1, SpecRatingRecordID1DocType); onchangeeventSR();" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="editor-field">
                                @Html.DropDownList("SpecRatingRecordID2", ViewBag.SpecRatingRecordID2 as SelectList, "- Select a Record Identifier -", new { id = "ddlSpecRatingRecordID2", onchange = "onchange_doctype(ddlSpecRatingRecordID2, SpecRatingRecordID2DocType); onchangeeventSR();" })
                            </div>
                        </td>
                        <td>
                            <label id="SpecRatingRecordMatrixCheck" class="message-error"></label>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">
                    @Html.Label("Rating Class RecID 1 DocType / Rating Class RecID 2  DocType")
                </div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.SpecRatingRecordID1DocType, new { id = "SpecRatingRecordID1DocType", @readonly = "readonly" })
                            </div>
                        </td>
                        <td> / </td>
                        <td>
                            <div class="medium">
                                @Html.TextBoxFor(model => model.SpecRatingRecordID2DocType, new { id = "SpecRatingRecordID2DocType", @readonly = "readonly" })
                            </div>
                        </td>

                    </tr>
                </table>
            </td>
        </tr>


        <tr>
            <td>
                <div class="editor-label">
                    @Html.LabelFor(model => model.MaterialTypeID)
                </div>
            </td>
            <td>
                <div class="editor-field">
                    @Html.DropDownList("MaterialTypeID", ViewBag.MaterialTypeID as SelectList, "- Select a Material Type -", new { id = "ddlMaterialTypeID" })
                </div>
            </td>
        </tr>

        <tr>
            <td><div class="editor-label">@Html.LabelFor(model => model.CoatingTypeID)</div></td>
            <td>
                <div class="editor-field">
                    @Html.DropDownList("CoatingTypeID", "- Select a Coating Type -")
                </div>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">@Html.LabelFor(model => model.Description)</div>
            </td>
            <td>
                <table>
                    <tr>
                        <td>
                            <div class="wide">
                                @Html.EditorFor(model => model.Description)
                            </div>
                        </td>
                        <td>
                            <div class="editor-field">
                                @Html.CheckBoxFor(model => model.DescriptionUnknown) Unknown
                            </div>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>

        <tr>
            <td>
                <div class="editor-label">@Html.LabelFor(model => model.ManufacturerID)</div>
            </td>
            <td>
                <div class="editor-field">@Html.DropDownList("ManufacturerID", "- Select a Manufacturer -")</div>
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.MFRModelNumber)
            </td>
            <td>
                @Html.EditorFor(model => model.MFRModelNumber)
            </td>
        </tr>

        <tr>
            <td>
                Class Exceptions
            </td>
            <td>
                @*@Html.DropDownList("ClassExceptionsID", "- Select Class Exception -")*@
                @Html.DropDownList("ClassExceptionsID", ViewBag.ClassExceptionsID as SelectList, new { id = "ddlClassExceptionsID" })
            </td>
        </tr>


        <tr>
            <td>
                @Html.LabelFor(model => model.CurrentClassLoc)
            </td>
            <td>
                @Html.DropDownList("CurrentClassLoc", "- Select Class Location -")
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.OperatingPressure)
            </td>
            <td>
                @Html.EditorFor(model => model.OperatingPressure)
            </td>
        </tr>

        <tr>
            <td>
                @Html.LabelFor(model => model.PTRID)
            </td>
            <td>
                @Html.DropDownList("PTRID", "- Select a Pressure Test Record -")
            </td>
        </tr>

        @*<tr>
            <td>
                HCA Status
            </td>
            <td>
                @Html.DropDownList("HCAStatusID", "- Choose Status of HCA -")
            </td>
        </tr>*@

    </table>

    <p>
        <input type="submit" value="Create" />
    </p>

</fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { ValveSectionID = Session["CurrentValveSection"].ToString() }, htmlAttributes: new { @class = "linkbutton" })
</div>

@section Scripts {
  @*@Scripts.Render("~/bundles/jqueryval")*@
  @*onchangeevent*@
    <script type="text/javascript">
        function onchangeevent(e) {
            var start = parseFloat($("#tbGISAlignStart").val());
            var end = parseFloat($("#tbGISAlignEnd").val());
            var length = end - start;
            if (length != null)
                $("#lblLength").html(length); //This shows the calculated field
            else
                $("#lblLength").html("0"); //This shows the calculated field
        };
         
    </script>
  @*onchangeeventlength*@
    <script type="text/javascript">
        function onchangeeventlength(e) {
            var start = parseFloat($("#tbGISAlignStart").val());
            var end = parseFloat($("#tbGISAlignEnd").val());
            var length = parseFloat($("#lblLength").html());
        }
    </script>
  @*onchangeeventOD*@
    <script type="text/javascript">
        function onchangeeventOD(e) {
            var selectedItem1 = $("#ddlODRecordID1").val();
            var selectedItem2 = $("#ddlODRecordID2").val();
            var lbl = $('#ODRecordMatrixCheck');
            var checktype = "OD";
            if (selectedItem1 == null || selectedItem1 == "")
                selectedItem1 = "0";
            if (selectedItem2 == null || selectedItem2 == "")
                selectedItem2 = "0";
            $.ajax({
                cache: false,
                type: "GET",
                url: '/Overview/MatrixCheck',
                data: { "checktype": checktype, "id1": selectedItem1, "id2": selectedItem2 },
                dataType: 'json',
                success: function (data) {
                    var items = "No";
                    $.each(data, function (i, data) {
                        items = "Yes";
                    });
                    var vFeature = document.getElementById('ddlFeatures');
                    var vFeatureText = vFeature.options[vFeature.selectedIndex].innerHTML;
                    if (vFeatureText == "Skip")
                        items = "No";
                    $("#ODRecordMatrixCheck").html(items);
                    document.getElementById("hdnODRecordMatrixCheck").value = (items == "No" ? "0" : "1");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    lbl.html("No");
                }
            });
        };
        function onchange_doctype(ddl, docTypeLabel) {
            var selectedItem1 = $(ddl).val();   
            var array = @Html.Raw(Json.Encode(@ViewBag.CurrentDocumentRecords));
            var docType = array.filter(function (val) {
                //return val.RecordIDName === selectedItem1;
                return (val.DocumentRecordID).toString() === selectedItem1;
            });
            if (docType.length > 0) {
                $(docTypeLabel).val(docType[0].DocumentTypeItem);
            }
            else {
                $(docTypeLabel).val("None");
            }
        };
    </script>
  @*onchangeeventWT*@
    <script type="text/javascript">
        function onchangeeventWT(e) {
            var selectedItem1 = $("#ddlWTRecordID1").val();
            var selectedItem2 = $("#ddlWTRecordID2").val();
            var lbl = $('#WTRecordMatrixCheck');
            var checktype = "WT";
            if (selectedItem1 == null || selectedItem1 == "")
                selectedItem1 = "0";
            if (selectedItem2 == null || selectedItem2 == "")
                selectedItem2 = "0";
            $.ajax({
                cache: false,
                type: "GET",
                url: '/Overview/MatrixCheck',
                data: { "checktype": checktype, "id1": selectedItem1, "id2": selectedItem2 },
                dataType: 'json',
                success: function (data) {
                    var items = "No";
                    $.each(data, function (i, data) {
                        items = "Yes";
                    });
                    var vFeature = document.getElementById('ddlFeatures');
                    var vFeatureText = vFeature.options[vFeature.selectedIndex].innerHTML;
                    if (vFeatureText == "Skip")
                        items = "No";
                    $("#WTRecordMatrixCheck").html(items);
                    document.getElementById("hdnWTRecordMatrixCheck").value = (items == "No" ? "0" : "1");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    lbl.html("No");
                }
            });
        }
    </script>
  @*onchangeeventST*@
    <script type="text/javascript">
        function onchangeeventST(e) {
            var selectedItem1 = $("#ddlSeamRecordID1").val();
            var selectedItem2 = $("#ddlSeamRecordID2").val();
            var lbl = $('#SeamRecordMatrixCheck');
            var checktype = "ST";
            if (selectedItem1 == null || selectedItem1 == "")
                selectedItem1 = "0";
            if (selectedItem2 == null || selectedItem2 == "")
                selectedItem2 = "0";
            $.ajax({
                cache: false,
                type: "GET",
                url: '/Overview/MatrixCheck',
                data: { "checktype": checktype, "id1": selectedItem1, "id2": selectedItem2 },
                dataType: 'json',
                success: function (data) {
                    var items = "No";
                    $.each(data, function (i, data) {
                        items = "Yes";
                    });
                    var vFeature = document.getElementById('ddlFeatures');
                    var vFeatureText = vFeature.options[vFeature.selectedIndex].innerHTML;
                    if (vFeatureText == "Skip")
                        items = "No";
                    $("#SeamRecordMatrixCheck").html(items);
                    document.getElementById("hdnSeamRecordMatrixCheck").value = (items == "No" ? "0" : "1");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    lbl.html("No");
                }
            });
        }
    </script>
  @*onchangeeventSR*@
    <script type="text/javascript">
        function onchangeeventSR(e) {
            var selectedItem1 = $("#ddlSpecRatingRecordID1").val();
            var selectedItem2 = $("#ddlSpecRatingRecordID2").val();
            var lbl = $('#SpecRatingRecordMatrixCheck');
            var checktype = "SR";
            if (selectedItem1 == null || selectedItem1 == "")
                selectedItem1 = "0";
            if (selectedItem2 == null || selectedItem2 == "")
                selectedItem2 = "0";
            $.ajax({
                cache: false,
                type: "GET",
                url: '/Overview/MatrixCheck',
                data: { "checktype": checktype, "id1": selectedItem1, "id2": selectedItem2 },
                dataType: 'json',
                success: function (data) {
                    var items = "No";
                    $.each(data, function (i, data) {
                        items = "Yes";
                    });
                    var vFeature = document.getElementById('ddlFeatures');
                    var vFeatureText = vFeature.options[vFeature.selectedIndex].innerHTML;
                    if (vFeatureText == "Skip")
                        items = "No";
                    $("#SpecRatingRecordMatrixCheck").html(items);
                    document.getElementById("hdnSpecRatingRecordMatrixCheck").value = (items == "No" ? "0" : "1");
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    lbl.html("No");
                }
            });
        }
    </script>
  @*pipetypesfromfeatures*@
    <script type="text/javascript">
        function pipetypesfromfeatures(e) {
            var vFeature = document.getElementById('ddlFeatures');
            var vFeatureText = vFeature.options[vFeature.selectedIndex].innerHTML;
            var selectedItem = $("#ddlFeatures").val();
            var ddlPipeTypes = $("#ddlPipeTypes");
            $.ajax({
                cache: false,
                type: "GET",
                url: '/Overview/LoadPipeTypes/',
                data: { "featureId": selectedItem },
                dataType: 'json',
                success: function (data) {
                    var items = "";
                    items += ("<option value='0'>- Select a Feature Type -</option>");
                    $.each(data, function (i, data) {
                        items += "<option value='" + data.Value + "'>" + data.Text + "</option>";
                    });
                    $("#ddlPipeTypes").html(items);
                    $("#ddlPipeTypes").removeAttr('disabled');
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    //alert('Failed to retrieve pipe types.');
                }
            });

            updateNAdropdowns();

            //            if (vFeatureText == "Skip") {
            //                document.getElementById('ddlODRecordID1').disabled = true;
            //                document.getElementById('ddlODRecordID2').disabled = true;
            //            }
            //            else {
            //                document.getElementById('ddlODRecordID1').disabled = false;
            //                document.getElementById('ddlODRecordID2').disabled = false;
            //            }
        }
    </script>
  @*updateNAdropdowns*@
    <script type="text/javascript">
        function updateNAdropdowns() {
            var vFeature = document.getElementById('ddlFeatures');
            var vFeatureText = vFeature.options[vFeature.selectedIndex].innerHTML;
            var vPipeType = document.getElementById('ddlPipeTypes');
            var vPipeTypeText = vPipeType.options[vPipeType.selectedIndex].innerHTML;

            document.getElementById("ddlODID1").options[0].innerHTML = "- Select an OD -";
            document.getElementById("ddlODID2").options[0].innerHTML = "- Select an OD -";
            document.getElementById("ddlSeamWeldTypeID").options[0].innerHTML = "- Select a Seam Weld Type -";
            document.getElementById("ddlSpecRatingID").options[0].innerHTML = "- Select a Spec Rating -";
            document.getElementById("ddlGradeID").options[0].innerHTML = "- Select a Grade -";

            if (vFeatureText == "Skip" && vPipeTypeText == "No Records") {
                document.getElementById("ddlODID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamWeldTypeID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlGradeID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlANSIRatingID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlRadiusID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlOrientID").options[0].innerHTML = "- N/A -";
            }
            if (vFeatureText == "Skip" && vPipeTypeText != "No Records") {
                document.getElementById("ddlODRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlANSIRatingID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlRadiusID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlOrientID").options[0].innerHTML = "- N/A -";
            }
            if (vFeatureText == "Pipe") {
                document.getElementById("ddlODID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlANSIRatingID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlRadiusID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlOrientID").options[0].innerHTML = "- N/A -";
            }
            if (vFeatureText == "Non Rated") {
                document.getElementById("ddlODID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlODRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlWTRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSeamRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID1").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlSpecRatingRecordID2").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlANSIRatingID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlRadiusID").options[0].innerHTML = "- N/A -";
                document.getElementById("ddlOrientID").options[0].innerHTML = "- N/A -";
            }
            onchangeeventOD(null);
            onchangeeventWT(null);
            onchangeeventST(null);
            onchangeeventSR(null);
        }
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            onchangeevent(); //Calculate on page load
            var vMaterialType = document.getElementById('ddlMaterialTypeID');
            for (var i = 0; i < vMaterialType.options.length; i++) {
                if (vMaterialType.options[i].text == 'Steel') {
                    vMaterialType.options[i].selected = true;
                }
            }
        });
    </script>
}
